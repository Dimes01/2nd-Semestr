#include <iostream>

int stepen(int a, int b)
{
	if (b == 0) return 1;
	int c = a;
	for (int i = 1; i < b; ++i) c *= a;
	return c;
}

class Number
{
private:
	int A, B, L, num_parts, len_parts, n_sistem;
	char *arr, *new_arr;
	char** some_arr;

public:
	Number()
	{
		set();
		split();
		make_new_system();
		print();
	}
	char converse(char*);
	void make_new_system();
	void set();
	void split();
	void print();
};


int main()
{
	Number A;
	return 0;
}

void Number::set()
{
	std::cin >> A >> B >> L;
	n_sistem = A;
	num_parts = L / B;
	len_parts = L / num_parts;
	for (int i = 0; i < B - 1; ++i) n_sistem *= A;
	arr = new char[L];
	new_arr = new char[num_parts];
	std::cin >> arr;
}
void Number::split()
{
	some_arr = new char* [num_parts];
	for (int i = 0; i < num_parts; ++i)
	{
		some_arr[i] = new char[len_parts];
		for (int j = 0; j < len_parts; ++j)
		{
			some_arr[i][j] = arr[i * len_parts + j];
		}
	}
}
void Number::print()
{
	for (int i = 0; i < num_parts; ++i)
	{
		std::cout << new_arr[i];
	}
}
void Number::make_new_system()
{
	for (int i = 0; i < num_parts; ++i)
	{
		new_arr[i] = converse(some_arr[i]);
	}
}
char Number::converse(char* str)
{
	int dec = 0;
	char symbol;
	for (int i = 0; i < len_parts; ++i)
	{
		if (str[len_parts - i - 1] != '0')
		{
			dec += (str[len_parts - i - 1] - 48) * stepen(A, i);
		}
	}
	if (dec < 10) symbol = 48 + dec;
	else symbol = 55 + dec;
	return symbol;
}
#include <iostream>
#include <vector>
#include <string>
#include <Windows.h>

using std::cout;
using std::cin;
using std::endl;
using std::vector;
using std::string;


void printBraces(const vector<int>&);
template<class t>
void printSpaces(t, int, bool);
void sort(vector<int>&);


class Relation
{
private:

	vector<int> arr;					// множество, на котором определено отношение
	vector<int> R;						// отношение
	vector<vector<bool>> matrixBin;		// матрица отношения
	vector<vector<bool>> composition;
	string Reflexivity;
	string Symmetry;
	string Transitivity;
	int Size;

public:
	Relation() { Size = 0; };
	void set(int);
	void checkRepeat();
	void makeR();
	void makeMatrix();
	void properties();
	void makeComposition();
	void printMatrix(const vector<vector<bool>>&, bool);
	bool inArr(int, int, int);
	void printProperties();
	vector<int> getR() { return R; }
	vector<vector<bool>> getMatrix() { return matrixBin; }
	vector<vector<bool>> getComposition() { return composition; }

};

//////////////////////////////////////////////////////////////////////

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	Relation A;
	int N;

	cin >> N;
	A.set(N);
	printBraces(A.getR());

	return 0;
}

//////////////////////////////////////////////////////////////////////

void Relation::set(int N)
{
	Size = N;
	arr.resize(Size);
	matrixBin.resize(Size);
	for (int i = 0; i < arr.size(); ++i) cin >> arr[i];
	checkRepeat();
	sort(arr);
	makeR();
	makeMatrix();
	makeComposition();
	properties();
}
void Relation::checkRepeat()
{
	int a, i = 0;
	for (int i = 0; i < Size - 1; ++i)
	{
		while (inArr(arr[i], 2, i))
		{
			cout << "Был введен повторяющийся элемент.\nВведите еще число: ";
			cin >> a;
			if (!inArr(a, 1, 0)) arr[i] = a;
		}
	}
}
void Relation::makeR()
{
	for (int i = 0; i < arr.size(); ++i)
	{
		for (int j = 0; j < arr.size(); ++j)
		{
			if ((arr[i] - arr[j]) % 3 == 0 && arr[i] != arr[j])
			{
				R.push_back(arr[i]);
				R.push_back(arr[j]);
			}
		}
	}
}
void Relation::makeMatrix()
{
	int k = 0;
	for (int i = 0; i < Size; ++i)
	{
		vector<bool> a;
		a.resize(Size);
		for (int j = 0; j < Size; ++j)
		{
			if (k < R.size()) a[j] = (arr[i] == R[k]) && (arr[j] == R[k + 1]);
			else a[j] = false;
			if (a[j] == true) k += 2;
		}
		matrixBin[i] = a;
	}
}
bool Relation::inArr(int a, int count, int beg)
{
	for (int i = beg; i < arr.size(); ++i)
	{
		if (a == arr[i]) --count;
		if (count <= 0) return true;
	}
	return false;
}
void Relation::printProperties()
{
	cout << Reflexivity << endl;
	cout << Symmetry << endl;
	cout << Transitivity << endl;
}
void Relation::properties()
{
	bool ref = true, sym = true, T = true;
	int countref = 0, countsym = 0;

	for (int i = 0; i < Size; ++i)
	{
		// Проверка на рефлексивность
		if (!matrixBin[i][i]) ref = false;
		else ++countref;

		for (int j = 0; j < Size; ++j)
		{
			// Проверка на симметричность
			if (matrixBin[i][j] != matrixBin[j][i]) sym = false;
			else ++countsym;

			// Проверка на транзитивность
			if (matrixBin[i][j] && T)
			{
				for (int k = 0; k < Size; ++k)
				{
					if (matrixBin[j][k] && !matrixBin[i][k])
					{
						T = false;
						break;
					}
				}
			}
		}
	}

	if (ref) Reflexivity = "Рефлексивно";
	else if (!countref) Reflexivity = "Антирефлексивно";
	else Reflexivity = "Нерефлексивно";

	if (sym) Symmetry = "Симметрично";
	else if (!countsym) Symmetry = "Антисимметрично";
	else Symmetry = "Несимметрично";

	if (T) Transitivity = "Транзитивно";
	else Transitivity = "Нетранзитивно";
}
void Relation::makeComposition()
{
	composition.resize(Size);
	for (int i = 0; i < Size; ++i)
	{
		composition[i].resize(Size);
		for (int j = 0; j < Size; ++j) composition[i][j] = false;
	}

	//Так как отношение симметрично, то R = R^(-1)
	for (int i = 0; i < Size; ++i)
	{
		for (int j = 0; j < Size; ++j)
		{
			if (matrixBin[i][j])
			{
				for (int k = 0; k < Size; ++k)
				{
					if (matrixBin[j][k]) composition[i][k] = true;
				}
			}
		}
	}
}
void Relation::printMatrix(const vector<vector<bool>> &a,bool onlyMatrix = false)
{
	// maxLenCount хранит длину печати элемента матрицы (максимальное кол-во цифр в числе + 1 для пробела)
	int maxLenCount = 1;
	for (int i = arr[arr.size() - 1]; i > 0; i /= 10) ++maxLenCount;

	// Печатаем первую строку с перечислением всех элементов
	if (!onlyMatrix)
	{
		for (int i = 0; i < maxLenCount; ++i) cout << ' ';
		for (int i = 0; i < a.size(); ++i)
		{
			cout << '|';
			printSpaces(arr[i], maxLenCount, false);
		}
		cout << '\n';

		// Печатаем строку из дефисов
		for (int i = 0; i < (maxLenCount + 1) * a.size() + maxLenCount; ++i) cout << '-';
		cout << '\n';
	}

	// Печатаем саму матрицу с перечислением всех элементов
	for (int i = 0; i < a.size(); ++i)
	{
		if (!onlyMatrix)
		{
			printSpaces(arr[i], maxLenCount, false);
			cout << '|';
		}
		for (int j = 0; j < a.size(); ++j)
		{
			printSpaces(a[i][j], maxLenCount, true);
			if (j < a.size() - 1) cout << ' ';
		}
		cout << '\n';
	}
}


void printBraces(const vector<int> &a)
{
	for (int i = 0; i < a.size(); i += 2)
	{
		if (i > 0) cout << ' ';
		cout << '(' << a[i] << ", " << a[i + 1] << ')';
	}
	cout << endl;
}
void sort(vector<int>& arr)
{
	for (int i = 0; i < arr.size(); ++i)
	{
		bool flag = false;
		for (int j = 0; j < arr.size() - 1; ++j)
		{
			if (arr[j + 1] < arr[j])
			{
				arr[j + 1] += arr[j];
				arr[j] = arr[j + 1] - arr[j];
				arr[j + 1] -= arr[j];
				flag = true;
			}
		}
		if (!flag) break;
	}
}


template<class t>
void printSpaces(t a, int len, bool flag)
{
	int lenA;
	if (flag) lenA = 1;
	else
	{
		lenA = 0;
		for (int i = a; i > 0; i /= 10) ++lenA;
	}
	for (int i = 0; i < len - lenA; ++i) cout << ' ';
	cout << a;
}